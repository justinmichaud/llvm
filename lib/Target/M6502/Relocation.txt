M6502 Relocation Principles

In LLVM, there are several elements of the llvm::ISD::NodeType enum
that deal with addresses and/or relocations. These are defined in
include/llvm/Target/TargetSelectionDAG.td, namely:
    GlobalAddress, GlobalTLSAddress, JumpTable, ConstantPool,
    ExternalSymbol, BlockAddress
The M6502 backend uses several principles to handle these.

1. Code for lowering addresses references to machine dependent code is
factored into common code for generating different address forms and
is called by the relocation model specific lowering function, using
templated functions. For example:

  // lib/Target/M6502/M6502ISelLowering.cpp
  SDValue M6502TargetLowering::
  lowerJumpTable(SDValue Op, SelectionDAG &DAG) const

calls

  template <class NodeTy> // lib/Target/M6502/M6502ISelLowering.h
  SDValue getAddrLocal(NodeTy *N, const SDLoc &DL, EVT Ty,
                       SelectionDAG &DAG, bool IsN32OrN64) const

which calls the overloaded function:

  // lib/Target/M6502/M6502ISelLowering.h
  SDValue getTargetNode(JumpTableSDNode *N, EVT Ty, SelectionDAG &DAG,
                        unsigned Flag) const;

2. Generic address nodes are lowered to some combination of target
independent and machine specific SDNodes (for example:
M6502ISD::{Highest, Higher, Hi, Lo}) depending upon relocation model,
ABI, and compilation options.

The choice of specific instructions that are to be used is delegated
to ISel which in turn relies on TableGen patterns to choose subtarget
specific instructions. For example, in getAddrLocal, the pseudo-code
generated is:

  (add (load (wrapper $gp, %got(sym)), %lo(sym))

where "%lo" represents an instance of an SDNode with opcode
"M6502ISD::Lo", "wrapper" indicates one with opcode "M6502ISD::Wrapper",
and "%got" the global table pointer "getGlobalReg(...)". The "add" is
"ISD::ADD", not a target dependent one.

3. A TableGen multiclass pattern "M6502HiLoRelocs" is used to define a
template pattern parameterized over the load upper immediate
instruction, add operation, the zero register, and register class.
Here the instantiation of M6502HiLoRelocs in M6502InstrInfo.td is used
to M650232 to compute addresses for the static relocation model.

  // lib/Target/M6502/M6502InstrInfo.td
  multiclass M6502HiLoRelocs<Instruction Lui, Instruction Addiu,
                            Register ZeroReg, RegisterOperand GPROpnd> {
    def : M6502Pat<(M6502Hi tglobaladdr:$in), (Lui tglobaladdr:$in)>;
    ...
    def : M6502Pat<(M6502Lo tglobaladdr:$in), (Addiu ZeroReg, tglobaladdr:$in)>;
    ...
    def : M6502Pat<(add GPROpnd:$hi, (M6502Lo tglobaladdr:$lo)),
                (Addiu GPROpnd:$hi, tglobaladdr:$lo)>;
    ...
  }
  defm : M6502HiLoRelocs<LUi, ADDiu, ZERO, GPR32Opnd>;

  // lib/Target/M6502/M650264InstrInfo.td
  defm : M6502HiLoRelocs<LUi64, DADDiu, ZERO_64, GPR64Opnd>, SYM_32;

The instantiation in M650264InstrInfo.td is used for M650264 in ILP32
mode, as guarded by the predicate "SYM_32" and also for a submode of
LP64 where symbols are assumed to be 32 bits wide. A similar
multiclass for M650264 in LP64 mode is also defined:

  // lib/Target/M6502/M650264InstrInfo.td
  multiclass M6502HighestHigherHiLoRelocs<Instruction Lui,
                                         Instruction Daddiu> {
  ...
    def : M6502Pat<(M6502Highest (i64 tglobaladdr:$in)),
                  (Lui tglobaladdr:$in)>;
  ...
    def : M6502Pat<(M6502Higher (i64 tglobaladdr:$in)),
                  (Daddiu ZERO_64, tglobaladdr:$in)>;
  ...
    def : M6502Pat<(add GPR64:$hi, (M6502Higher (i64 tglobaladdr:$lo))),
                  (Daddiu GPR64:$hi, tglobaladdr:$lo)>;
  ...
    def : M6502Pat<(add GPR64:$hi, (M6502Hi (i64 tglobaladdr:$lo))),
                  (Daddiu GPR64:$hi, tglobaladdr:$lo)>;
  ...
    def : M6502Pat<(add GPR64:$hi, (M6502Lo (i64 tglobaladdr:$lo))),
                  (Daddiu GPR64:$hi, tglobaladdr:$lo)>;
  }

and it is instantiated twice:

  // lib/Target/M6502/M650264InstrInfo.td
  defm : M6502HighestHigherHiLoRelocs<LUi64, DADDiu>, SYM_64;
  // lib/Target/M6502/MicroM650264r6InstrInfo.td
  defm : M6502HighestHigherHiLoRelocs<LUi64, DADDIU_MM64R6>, SYM_64,
                                     ISA_MICROM650264R6;

These patterns are used during instruction selection to match
M6502ISD::{Highest, Higher, Hi, Lo} to a specific machine instruction
and operands.

More details on how multiclasses in TableGen work can be found in the
section "Multiclass definitions and instances" in the document
"TableGen Language Introduction"

4. Instruction definitions are multiply defined to cover the different
register classes. In some cases, such as LW/LW64, this also accounts
for the difference in the results of instruction execution. On M650232,
"lw" loads a 32 bit value from memory. On M650264, "lw" loads a 32 bit
value from memory and sign extends the value to 64 bits.

  // lib/Target/M6502/M6502InstrInfo.td
  def LUi   : MMRel, LoadUpper<"lui", GPR32Opnd, uimm16_relaxed>, LUI_FM;
  // lib/Target/M6502/M650264InstrInfo.td
  def LUi64   : LoadUpper<"lui", GPR64Opnd, uimm16_64_relaxed>, LUI_FM;

defines two names "LUi" and "LUi64" with two different register
classes, but with the same encoding---"LUI_FM". These instructions load a
16-bit immediate into bits 31-16 and clear the lower 15 bits. On M650264,
the result is sign-extended to 64 bits.
